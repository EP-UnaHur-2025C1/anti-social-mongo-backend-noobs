openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: Documentación de la Red Anti-Social
servers:
  - url: http://localhost:3001
paths:
  /user:
    get:
      summary: Obtener todos los usuarios
      tags:
        - User
      responses:
        '200':
          description: Lista de usuarios
        '500':
          description: Ocurrio un error al conctar la api
    post:
      summary: Crear un nuevo usuario
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuario creado correctamente
        '400':
          description: Error de validación
  /user/{nickName}:
    get:
      summary: Obtener un usuario por nickName
      tags:
        - User
      parameters:
        - name: nickName
          in: path
          required: true
          schema:
            type: string
          description: nickName del usuario
      responses:
        '200':
          description: Usuario encontrado
        '404':
          description: Usuario no encontrado
    put:
      summary: Actualizar un usuario por nickName
      tags:
        - User
      parameters:
        - name: nickName
          in: path
          required: true
          schema:
            type: string
          description: nickName del usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400':
          description: Error de validación
        '404':
          description: Usuario no encontrado
    delete:
      summary: Eliminar un usuario por nickName
      tags:
        - User
      parameters:
        - name: nickName
          in: path
          required: true
          schema:
            type: string
          description: nickName del usuario a eliminar
      responses:
        '200':
          description: Usuario eliminado
        '404':
          description: Usuario no encontrado
  /user/{nickName1}/{nickName2}:
    put:
      summary: El usuario nickName1 sigue al usuario nickName2
      tags:
        - User
      parameters:
        - name: nickName1
          in: path
          required: true
          schema:
            type: string
          description: nickName del usuario que va a seguir
        - name: nickName2
          in: path
          required: true
          schema:
            type: string
          description: nickName del usuario que será seguido
      responses:
        '200':
          description: El usuario empezó a seguir al otro correctamente
        '400':
          description: Error de validación o ya lo sigue
        '404':
          description: Alguno de los usuarios no fue encontrado
  
  /post:
    get:
      summary: Obtener todos los posts
      tags:
        - Post
      responses:
        '200':
          description: Lista de posts obtenida exitosamente
    post:
      summary: Crear un nuevo post
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post creado correctamente
        '400':
          description: Error de validación
  /post/{id}:
    get:
      summary: Obtener un post por ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del post
      responses:
        '200':
          description: Post encontrado
        '404':
          description: Post no encontrado
    put:
        summary: Actualizar un post por ID
        tags:
            - Post
        parameters:
            - name: id
              in: path
              required: true
              schema:
                  type: integer
              description: ID del post
        requestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            description:
                                type: string
                                example: "Descripción actualizada"
                        required:
                            - description
        responses:
            '200':
                description: Post actualizado
    delete:
      summary: Eliminar un post por ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del post a eliminar
      responses:
        '200':
          description: Post eliminado
        '404':
          description: Post no encontrado

  /post/{id}/images:
    put:
      summary: Actualizar la URL de la imagen de un post por ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  example: "https://example.com/image100.jpg"
              required:
                - url
      responses:
        '200':
          description: URL de la imagen actualizada correctamente
        '404':
          description: Post no encontrado


  /post/{id}/images/{imageId}:
    put:
        summary: Actualizar un post por ID
        tags:
            - Post
        parameters:
            - name: id
              in: path
              required: true
              schema:
                  type: integer
              description: ID del post
            - name: imageId
              in: path
              required: true
              schema:
                  type: integer
              description: imageId del post
        requestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            description:
                                type: string
                                example: "Descripción actualizada"
                        required:
                            - description
        responses:
            '200':
                description: Post actualizado correctamente
            '400':
                description: Error de validación
            '404':
                description: Post no encontrado

    delete:
        summary: Eliminar un post por ID
        tags:
            - Post
        parameters:
            - name: id
              in: path
              required: true
              schema:
                  type: integer
              description: ID del post
            - name: imageId
              in: path
              required: true
              schema:
                  type: integer
              description: imageId del post
        responses:
            '200':
                description: Post eliminado correctamente
            '404':
                description: Post no encontrado

  /comment:
    get:
      summary: Obtener todos los comentarios
      tags:
        - Comment
      responses:
        '200':
          description: Lista de comentarios obtenida exitosamente
    post:
      summary: Crear un nuevo comentario
      tags:
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comentario creado correctamente
        '400':
          description: Error de validación
  /comment/{id}:
    get:
      summary: Obtener un comentario por ID
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del comentario
      responses:
        '200':
          description: Comentario encontrado
        '404':
          description: Comentario no encontrado
    put:
      summary: Actualizar un comentario por ID
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del comentario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comentario actualizado correctamente
        '400':
          description: Error de validación
        '404':
          description: Comentario no encontrado
    delete:
      summary: Eliminar un comentario por ID
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del comentario a eliminar
      responses:
        '200':
          description: Comentario eliminado
        '404':
          description: Comentario no encontrado
  /tag:
    get:
      summary: Obtener todas las etiquetas
      tags:
        - Tag
      responses:
        '200':
          description: Lista de tags obtenida exitosamente
    post:
      summary: Crear una nueva etiqueta
      tags:
        - Tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Etiqueta creada correctamente
        '400':
          description: Error de validación
  /tag/{id}:
    get:
      summary: Obtener una etiqueta por ID
      tags:
        - Tag
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la etiqueta
      responses:
        '200':
          description: Etiqueta encontrada
        '404':
          description: Etiqueta no encontrada
    put:
      summary: Actualizar una etiqueta por ID
      tags:
        - Tag
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la etiqueta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: Etiqueta actualizada correctamente
        '400':
          description: Error de validación
        '404':
          description: Etiqueta no encontrada
    delete:
      summary: Eliminar una etiqueta por ID
      tags:
        - Tag
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la etiqueta a eliminar
      responses:
        '200':
          description: Etiqueta eliminada
        '404':
          description: Etiqueta no encontrada

  /post_image:
    get:
      summary: Obtener todas las imágenes de post
      tags:
        - Post_Image
      responses:
        '200':
          description: Lista de PostImages obtenida exitosamente
    post:
      summary: Crear una imagen de post
      tags:
        - Post_Images
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostImage'
      responses:
        '201':
          description: PostImage creada correctamente
        '400':
          description: Error de validación
  /post_image/{id}:
    get:
      summary: Obtener una imagen de post por ID
      tags:
        - Post_Image
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la imagen de post
      responses:
        '200':
          description: PostImage encontrada
        '404':
          description: PostImage no encontrada
    put:
      summary: Actualizar una imagen de post por ID
      tags:
        - Post_Images
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la imagen de post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostImage'
      responses:
        '200':
          description: PostImage actualizada correctamente
        '400':
          description: Error de validación
        '404':
          description: PostImage no encontrada
    delete:
      summary: Eliminar una imagen de post por ID
      tags:
        - Post_Images
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de la imagen de post a eliminar
      responses:
        '200':
          description: PostImage eliminada
        '404':
          description: PostImage no encontrada

components:
  schemas:
    User:
      type: object
      properties:
        nickName:
          type: string
          example: usuario123
        email:
          type: string
          format: email
      required:
        - nickName
        - email
    Post:
      type: object
      properties:
        description:
          type: string
          example: texto de prueba
        nickName:
          type: integer
          example: "usuario123"
        fecha:
          type: string
          example: "03-05-2025"
        imagenes:
          type: array
          example: ["https://example.com/image1.jpg"]
          items:
            type: string
        tags:
          type: array
          example: ["TagPrueba"]
          items:
            type: string
      required:
        - description
        - nickName
        - fecha
    Comment:
      type: object
      properties:
        description:
          type: string
          example: "Comentario de prueba"
        fecha:
          type: string
          example: "03-05-2025"
        postId:
          type: integer
          example: 6855e9cdad0df42730645613
        nickName:
          type: string
          example: "usuario123"
      required:
        - description
        - fecha
        - postId
        - nickName
    Tag:
      type: object
      properties:
        tagName:
          type: string
          example: "TagPrueba"
      required:
        - tagName
    PostImage:
      type: object
      properties:
        url:
          type: string
          example: "https://example.com/image1.jpg"
      required:
        - url
